import*as t from"three";import{OrbitControls as e}from"three/examples/jsm/controls/OrbitControls";class i{constructor(){this._entities=[],this._entityMap=new Map,this._ids=0}generateNames(){return this._ids++,`entity-${this._ids}`}Add(t,e){e||(e=this.generateNames()),this._entities.push(t),this._entityMap.set(e,t),t.Parent=this}Get(t){return this._entityMap.get(t)}Remove(t){const e=this._entityMap.get(t);e&&(this._entities.splice(this._entities.indexOf(e),1),this._entityMap.delete(t))}Filter(t){this._entities=this._entities.filter(t)}Update(t){for(const e of this._entities)e.Update(t)}}class s{constructor(t,e={}){if(this.options=e,this._orbitControls=null,this._entityController=new i,this._prevTime=null,"string"==typeof t){const e=document.querySelector(t);if(!e)throw new Error("Could not find root element");this._rootElement=e}else this._rootElement=t;this.createCamera(),this.createRenderer(),this.createScene(),window.addEventListener("resize",this.onWindowResize.bind(this)),this.update()}createRenderer(){this._renderer=new t.WebGLRenderer,this._renderer.setPixelRatio(window.devicePixelRatio),this._renderer.setSize(window.innerWidth,window.innerHeight),this._renderer.outputColorSpace=t.SRGBColorSpace,this._renderer.shadowMap.enabled=!0,this._renderer.shadowMap.type=t.PCFSoftShadowMap,this._rootElement.appendChild(this._renderer.domElement)}createCamera(){this._camera=new t.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3),this.options.useOrbitControls&&(this._orbitControls=new e(this._camera,this._renderer.domElement))}createScene(){this._scene=new t.Scene}onWindowResize(){this._renderer.setSize(window.innerWidth,window.innerHeight),this._camera.aspect=window.innerWidth/window.innerHeight,this._camera.updateProjectionMatrix(),this._orbitControls&&this._orbitControls.update()}AddChild(t,e){this._entityController.Add(t,e)}removeChild(t){this._entityController.Remove(t)}update(){requestAnimationFrame((t=>{this._prevTime||(this._prevTime=t),this.update(),this.step(t-this._prevTime),this._renderer.render(this._scene,this._camera),this._prevTime=t}))}step(t){const e=Math.min(1/30,.001*t);this._entityController.Update(e)}get Camera(){return this._camera}}class n{constructor(){this._parent=null}Update(t){}Emit(t,e){}AddHandler(t,e){}set Parent(t){this._parent=t}get Parent(){return this._parent}}class r extends n{constructor(){super(),this._parent=null}AddHandler(t,e){this._parent&&this._parent.AddHandler(t,e)}Emit(t,e){this._parent&&this._parent.Emit(t,e)}InitComponent(){}}class o extends n{constructor(){super(),this._children=[],this._name=null,this._handlers={},this._position=new t.Vector3,this._rotation=new t.Euler}AddChild(t){t.Parent=this,this._children.push(t)}RemoveChild(t){const e=this._children.indexOf(t);-1!==e&&this._children.splice(e,1)}Update(t){for(const e of this._children)e.Update(t)}Emit(t,e){if(t in this._handlers)for(const i of this._handlers[t])i({type:t,details:e})}AddHandler(t,e){this._handlers[t]||(this._handlers[t]=[]),this._handlers[t].push(e)}get Name(){return this._name}set Name(t){this._name=t}get Position(){return this._position}set Position(t){this._position.copy(t),this.Emit("update.position",this._position)}set Rotation(t){this._rotation.copy(t),this.Emit("update.rotation",this._rotation)}get Rotation(){return this._rotation}}export{r as Component,n as ComponentBase,o as Entity,s as Project};
